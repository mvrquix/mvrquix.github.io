{"version":3,"sources":["constants.js","SettingsModal.js","utils.js","App.js","index.js"],"names":["MODE_POMODORO","MODE_SHORT","MODE_LONG","FONT_KUMBH","FONT_ROBOTO","FONT_SPACE","COLOR_ONE","COLOR_TWO","COLOR_THREE","SettingsModal","show","settings","onUpdate","onHide","useState","params","setParams","handleInputChange","event","target","name","value","handleValueChange","isValueSelected","Modal","style","color","Header","closeButton","Body","className","onChange","pomodoro","short","long","onClick","type","fontFamily","background","src","alt","Footer","selectedColor","selectedFont","marginBottom","secondsToTime","secs","hours","Math","floor","divisor_for_minutes","divisor_for_seconds","ceil","CircleProgress","percentage","circ","PI","strokePct","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","strokeLinecap","App","initialSettings","updateSettings","mode","setMode","time","seconds","countDown","setCountDown","showSettingsModal","toggleSettingsModal","isPaused","togglePaused","timerRef","useRef","useEffect","timeLeft","toggleCountdown","current","setInterval","startCountdown","clearInterval","prevCountDown","formatTime","minutes","toLocaleString","minimumIntegerDigits","useGrouping","handleModeChange","role","pct","cursor","width","height","transform","x","y","dominantBaseline","textAnchor","fontSize","m","s","renderTimerClock","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08f5e248.chunk.js","sourcesContent":["export const MODE_POMODORO = 'pomodoro'\r\nexport const MODE_SHORT = 'short'\r\nexport const MODE_LONG = 'long'\r\n\r\nexport const FONT_KUMBH = 'Kumbh Sans'\r\nexport const FONT_ROBOTO = 'Roboto Slab'\r\nexport const FONT_SPACE = 'Space Mono'\r\n\r\nexport const COLOR_ONE = '#F87070'\r\nexport const COLOR_TWO = '#70F3F8'\r\nexport const COLOR_THREE = '#D881F8'","import { useState } from 'react'\r\nimport {\r\n    COLOR_ONE,\r\n    COLOR_TWO,\r\n    COLOR_THREE,\r\n    FONT_KUMBH,\r\n    FONT_ROBOTO,\r\n    FONT_SPACE\r\n} from './constants'\r\nimport { Modal } from 'react-bootstrap'\r\n\r\nconst SettingsModal = ({ show, settings, onUpdate, onHide }) => {\r\n    const [params, setParams] = useState({})\r\n\r\n    const handleApplyClick = () => {\r\n        onUpdate({\r\n            pomodoro: params.pomodoro ?? settings.pomodoro,\r\n            short: params.short ?? settings.short,\r\n            long: params.long ?? settings.long,\r\n            selectedColor: params.selectedColor ?? settings.selectedColor,\r\n            selectedFont: params.selectedFont ?? settings.selectedFont\r\n        })\r\n        onHide()\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target\r\n\r\n        setParams({\r\n            ...params,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleValueChange = (name, value) => {\r\n        setParams({\r\n            ...params,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const isValueSelected = (name, value) => {\r\n        return (params[name] && params[name] === value) ?? settings[name] === value\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={onHide} style={{ color: '#161932' }}>\r\n            <Modal.Header closeButton>\r\n                <h3>Settings</h3>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h6>TIME (MINUTES)</h6>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <label className=\"timer-setting-label\">pomodoro</label>\r\n                        <select\r\n                            onChange={handleInputChange}\r\n                            name=\"pomodoro\"\r\n                            className=\"form-select\"\r\n                            value={params.pomodoro ?? settings.pomodoro}>\r\n                            <option value=\"900\">15</option>\r\n                            <option value=\"1800\">30</option>\r\n                            <option value=\"2700\">45</option>\r\n                            <option value=\"3600\">60</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <label className=\"timer-setting-label\">short break</label>\r\n                        <select\r\n                            onChange={handleInputChange}\r\n                            name=\"short\"\r\n                            className=\"form-select\"\r\n                            value={params.short ?? settings.short}>\r\n                            <option value=\"900\">15</option>\r\n                            <option value=\"1800\">30</option>\r\n                            <option value=\"2700\">45</option>\r\n                            <option value=\"3600\">60</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <label className=\"timer-setting-label\">long break</label>\r\n                        <select\r\n                            onChange={handleInputChange}\r\n                            name=\"long\"\r\n                            className=\"form-select\"\r\n                            value={params.long ?? settings.long}>\r\n                            <option value=\"900\">15</option>\r\n                            <option value=\"1800\">30</option>\r\n                            <option value=\"2700\">45</option>\r\n                            <option value=\"3600\">60</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"row  align-items-center\">\r\n                    <div className=\"col-md-6 d-flex justify-content-start\">\r\n                        <h6>FONT</h6>\r\n                    </div>\r\n                    <div className=\"col-md-6 d-flex justify-content-end\">\r\n                        <div>\r\n                            <button\r\n                                onClick={() => handleValueChange('selectedFont', FONT_KUMBH)}\r\n                                type=\"button\"\r\n                                className={`btn timer-setting-btn ${isValueSelected('selectedFont', FONT_KUMBH) ? 'btn-dark' : 'btn-light'}`}\r\n                                style={{ fontFamily: FONT_KUMBH }}>\r\n                                Aa\r\n                            </button>\r\n                            <button\r\n                                onClick={() => handleValueChange('selectedFont', FONT_ROBOTO)}\r\n                                type=\"button\"\r\n                                className={`btn timer-setting-btn mx-2 ${isValueSelected('selectedFont', FONT_ROBOTO) ? 'btn-dark' : 'btn-light'}`}\r\n                                style={{ fontFamily: FONT_ROBOTO }}>\r\n                                Aa\r\n                            </button>\r\n                            <button\r\n                                onClick={() => handleValueChange('selectedFont', FONT_SPACE)}\r\n                                type=\"button\"\r\n                                className={`btn timer-setting-btn ${isValueSelected('selectedFont', FONT_SPACE) ? 'btn-dark' : 'btn-light'}`}\r\n                                style={{ fontFamily: FONT_SPACE }}>\r\n                                Aa\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6 d-flex justify-content-start\">\r\n                        <h6>COLOR</h6>\r\n                    </div>\r\n                    <div className=\"col-md-6 d-flex justify-content-end\">\r\n                        <div>\r\n                            <button\r\n                                onClick={() => handleValueChange('selectedColor', COLOR_ONE)}\r\n                                type=\"button\"\r\n                                className=\"btn timer-setting-btn\"\r\n                                style={{ background: COLOR_ONE }}>\r\n                                {isValueSelected('selectedColor', COLOR_ONE) && (<img src=\"/assets/icon-check.svg\" className=\"checkmark\" alt=\"checked\" />)}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => handleValueChange('selectedColor', COLOR_TWO)}\r\n                                type=\"button\"\r\n                                className=\"btn timer-setting-btn mx-2\"\r\n                                style={{ background: COLOR_TWO }}>\r\n                                {isValueSelected('selectedColor', COLOR_TWO) && (<img src=\"/assets/icon-check.svg\" className=\"checkmark\" alt=\"checked\" />)}\r\n                            </button>\r\n                            <button\r\n                                onClick={() => handleValueChange('selectedColor', COLOR_THREE)}\r\n                                type=\"button\"\r\n                                className=\"btn timer-setting-btn\"\r\n                                style={{ background: COLOR_THREE }}>\r\n                                {isValueSelected('selectedColor', COLOR_THREE) && (<img src=\"/assets/icon-check.svg\" className=\"checkmark\" alt=\"checked\" />)}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"border-0\">\r\n                <button\r\n                    onClick={handleApplyClick}\r\n                    type=\"button\"\r\n                    className=\"btn rounded-pill text-white mx-auto px-5\"\r\n                    style={{ background: '#F87070', marginBottom: '-30px' }}>\r\n                    Apply\r\n                </button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal","export function secondsToTime(secs) {\r\n    let hours = Math.floor(secs / (60 * 60));\r\n\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let obj = {\r\n        \"m\": minutes + (hours * 60),\r\n        \"s\": seconds\r\n    };\r\n    return obj;\r\n}","import { useEffect, useState, useRef } from 'react'\nimport SettingsModal from './SettingsModal'\nimport {\n  MODE_POMODORO,\n  MODE_SHORT,\n  MODE_LONG,\n  COLOR_ONE,\n  FONT_KUMBH,\n} from './constants'\nimport { secondsToTime } from './utils'\n\nconst App = () => {\n  const initialSettings = {\n    pomodoro: 3600,\n    short: 900,\n    long: 1800,\n    selectedColor: COLOR_ONE,\n    selectedFont: FONT_KUMBH\n  }\n  const [settings, updateSettings] = useState(initialSettings)\n  const [mode, setMode] = useState(MODE_POMODORO)\n  const [countDown, setCountDown] = useState({ time: {}, seconds: settings.pomodoro })\n  const [showSettingsModal, toggleSettingsModal] = useState(false)\n  const [isPaused, togglePaused] = useState(true)\n\n  const timerRef = useRef()\n\n  useEffect(() => {\n    const timeLeft = secondsToTime(countDown.seconds)\n    setCountDown({\n      ...countDown,\n      time: timeLeft\n    })\n    // eslint-disable-next-line\n  }, [])\n\n  const toggleCountdown = () => {\n    if (isPaused) {\n      timerRef.current = setInterval(startCountdown, 1000)\n      togglePaused(false)\n    } else {\n      clearInterval(timerRef.current)\n      togglePaused(true)\n    }\n  }\n\n  const startCountdown = () => {\n    setCountDown((prevCountDown) => {\n      let seconds = prevCountDown.seconds - 1\n      if (seconds === 0) {\n        clearInterval(timerRef.current)\n      }\n\n      return {\n        time: secondsToTime(seconds),\n        seconds: seconds\n      }\n    })\n  }\n\n  const renderTimerClock = () => {\n    const pct = (countDown.seconds / settings[mode]) * 100\n    return (\n      <div className=\"row my-5\">\n        <div className=\"col-md-6 mx-auto text-center\">\n          <div onClick={toggleCountdown} className=\"timer-circle mx-auto d-flex flex-column align-items-center justify-content-center\" style={{ cursor: 'pointer' }}>\n            <svg width=\"350\" height=\"350\">\n              <g transform={`rotate(-90 ${\"100 100\"})`}>\n                <CircleProgress color=\"rgba(22, 25, 50, 1)\" />\n                <CircleProgress color={settings.selectedColor} percentage={pct} />\n              </g>\n              <text\n                x=\"50%\"\n                y=\"50%\"\n                dominantBaseline=\"central\"\n                textAnchor=\"middle\"\n                fontSize={\"100px\"}\n                className=\"time-text\">\n                {formatTime(countDown.time?.m, countDown.time.s)}\n              </text>\n              <text\n                x=\"50%\"\n                y=\"70%\"\n                dominantBaseline=\"central\"\n                textAnchor=\"middle\"\n                fontSize={\"16px\"}\n                className=\"time-text-detail\">\n                {isPaused ? 'START' : 'PAUSE'}\n              </text>\n            </svg>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const formatTime = (minutes, seconds) => {\n    if (!(minutes || seconds)) return '00:00'\n    return `${minutes.toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}:${seconds.toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false })}`\n  }\n\n  const handleModeChange = (mode) => {\n    setMode(mode)\n    setCountDown({ time: secondsToTime(settings[mode]), seconds: settings[mode] })\n  }\n\n  return (\n    <div className=\"container-fluid\" style={{ fontFamily: settings.selectedFont }}>\n      <SettingsModal\n        show={showSettingsModal}\n        settings={settings}\n        onUpdate={updateSettings}\n        onHide={() => toggleSettingsModal(false)} />\n\n      <div className=\"row text-center mt-5\">\n        <h1><img src=\"/assets/logo.svg\" alt=\"logo\" /></h1>\n      </div>\n\n      <div className=\"row mt-5\">\n        <div className=\"col-md-6 mx-auto text-center\">\n          <div className=\"btn-group btn-container p-2 rounded-pill\" role=\"group\" aria-label=\"Basic example\">\n            <button\n              onClick={() => handleModeChange(MODE_POMODORO)}\n              type=\"button\"\n              className=\"btn mode-toggle rounded-pill\"\n              style={{ background: mode === MODE_POMODORO ? settings.selectedColor : '' }}>\n              pomodoro\n            </button>\n            <button\n              onClick={() => handleModeChange(MODE_SHORT)}\n              type=\"button\"\n              className=\"btn mode-toggle rounded-pill\"\n              style={{ background: mode === MODE_SHORT ? settings.selectedColor : '' }}>\n              short break\n            </button>\n            <button\n              onClick={() => handleModeChange(MODE_LONG)}\n              type=\"button\"\n              className=\"btn mode-toggle rounded-pill\"\n              style={{ background: mode === MODE_LONG ? settings.selectedColor : '' }}>\n              long break\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {renderTimerClock()}\n\n      <div className=\"row mb-5\">\n        <div className=\"col-md-6 mx-auto text-center\">\n          <button onClick={() => toggleSettingsModal(true)} type=\"button\" className=\"btn bg-none\">\n            <img src=\"/assets/icon-settings.svg\" alt=\"settings\" />\n          </button>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nconst CircleProgress = ({ color, percentage }) => {\n  const r = 150\n  const circ = 2 * Math.PI * r\n  const strokePct = ((100 - percentage) * circ) / 100\n  return (\n    <circle\n      r={r}\n      cx={25}\n      cy={175}\n      fill=\"transparent\"\n      stroke={strokePct !== circ ? color : \"\"}\n      strokeWidth={\"10px\"}\n      strokeDasharray={circ}\n      strokeDashoffset={percentage ? strokePct : 0}\n      strokeLinecap=\"round\"\n    ></circle>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}